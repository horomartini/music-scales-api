type Query {
  """Fetch a single Note by its ID."""
  getNote(id: ID!): Note

  """Fetch Notes that can be filtered, sorted and paginated."""
  getNotes(filter: FilteringInput, sort: SortingInput, paginate: PaginatingInput): [Note]


  """Fetch a single Instrument by its ID."""
  getInstrument(id: ID!): Instrument

  """Fetch Instruments that can be filtered, sorted and paginated."""
  getInstruments(filter: FilteringInput, sort: SortingInput, paginate: PaginatingInput): [Instrument]


  """Fetch a single Tuning by its ID."""
  getTuning(id: ID!): Tuning

  """Fetch Tunings that can be filtered, sorted and paginated."""
  getTunings(filter: FilteringInput, sort: SortingInput, paginate: PaginatingInput): [Tuning]


  """Fetch a single Scale by its ID."""
  getScale(id: ID!): Scale

  """Fetch Scales that can be filtered, sorted and paginated."""
  getScales(filter: FilteringInput, sort: SortingInput, paginate: PaginatingInput): [Scale]
}

type Mutation {
  addNote(input: AddNoteInput!): Note
  updateNote(id: ID!, input: UpdateNoteInput): Note
  deleteNote(id: ID!): ID

  addInstrument(input: AddInstrumentInput!): Instrument
  updateInstrument(id: ID!, input: UpdateInstrumentInput): Instrument
  deleteInstrument(id: ID!): ID

  addTuning(input: AddTuningInput!): Tuning
  updateTuning(id: ID!, input: UpdateTuningInput): Tuning
  deleteTuning(id: ID!): ID

  addScale(input: AddScaleInput!): Scale
  updateScale(id: ID!, input: UpdateScaleInput): Scale
  deleteScale(id: ID!): ID
}


#* Data Types

"""
Specifies a certain sound being based from 12 TET.
"""
type Note {
  """Valid database-specific ID."""
  id: ID!

  """Name of the note, e.g. C#, B, etc."""
  name: String!
}

"""
Specifies a note with added octave for better descriptive sound.
"""
type PhysicalNote {
  """Note with assigned octave to it."""
  note: Note

  """Octave number in range [0, +Inf], e.g. 0, 8, etc."""
  octave: Int!
}

"""
Specifies an instrument and a way to tune it (and available root sounds).
"""
type Instrument {
  """Valid database-specific ID."""
  id: ID!

  """Name of the instrument, e.g. Guitar, Violin, etc."""
  name: String!

  """Tuning being the default tuning for this instrument."""
  defaultTuning: Tuning
}

"""
Specifies a possible tuning of root notes for specific instrument.
"""
type Tuning {
  """Valid database-specific ID."""
  id: ID!

  """Name of the tuning, e.g. E Standard, etc."""
  name: String!

  """Instrument being assignable to / compatible with this tuning."""
  instrument: Instrument

  """Notes with octaves for this tuning, assigned from low-tone to high-tone note."""
  notes: [PhysicalNote]
}

"""
Specifies a set of complementary notes with number of half-tone steps to take between each note.
"""
type Scale {
  """Valid database-specific ID."""
  id: ID!

  """Name of the scale, e.g. Aeolian, Double Harmonic, etc."""
  name: String!

  """Half-tone steps (in 12 TET) to take between each successive note, sum of this array needs to always result 12 to be valid."""
  steps: [Int!]!
}


#* Enums

"""
Comparison and inclusion operators for field <-> value checks.
"""
enum FilterOperator {
  """Specifies less or equal comparison operation, e.g. X <= Y"""
  LESS_EQUALS

  """Specifies less than comparison operation, e.g. X < Y."""
  LESS_THAN

  """Specifies greater or equal comparison operation, e.g. X >= Y."""
  GREATER_EQUALS

  """Specifies greater than comparison operation, e.g. X > Y."""
  GREATER_THAN

  """Specifies not equal comparison operation, e.g. X != Y."""
  NOT_EQUALS

  """Specifies equal comparison operation, e.g. X = Y or X == Y."""
  EQUALS
  
  """Unimplemented; Specifies inclusion comparison operation, e.g. Y.includes(X) or X in Y."""
  INCLUDES

  """Unimplemented; Specifies exclusion comparison operation, e.g. !Y.includes(X) or X not in Y."""
  NOT_INCLUDES
}

"""
Sorting orders.
"""
enum SortOrder {
  """Ascending order, e.g. [a, b, c] or [1, 2, 3]."""
  ASC

  """Descending order, e.g. [c, b, a] or [3, 2, 1]."""
  DESC
}


#* Scalars

"""
Scalar describing primitive GraphQl values (Int, Float, String and Boolean, without ID) as one value able to be any of those primitives to be valid.
Works in a similair way as a union, but for primitive types.
"""
scalar VariedPrimitive


#* UX Inputs

"""
Input for filtering result.
One of given fields should only be set, otherwise first encountered set field will be chosen.
"""
input FilteringInput {
  """Filtering for singular field."""
  singleFieldFilter: SingleFieldFilteringInput

  """AIP-160 compliant filtering."""
  withString: String
}

"""
Input for sorting result. 
One of given fields should only be set, otherwise first encountered set field will be chosen.
"""
input SortingInput {
  """Sorting for singular field."""
  singleFieldSort: SingleFieldSortingInput

  """AIP-132 compliant ordering."""
  withString: String
}

"""
Input for paginating result.
"""
input PaginatingInput {
  """Number of the page to return; Accepts only natural numbers."""
  page: Int!

  """Limits number of results for pages; Accepts only natural numbers."""
  limit: Int!
}

"""
Input for filtering against singular field and its value.
"""
input SingleFieldFilteringInput {
  """Name of the field in type."""
  field: String!

  """Operation to execute for following value against this field."""
  operation: FilterOperator!

  """Varied value of primitive GraphQL types."""
  value: VariedPrimitive!
}

"""
Input for sorting result against singular field in a list.
"""
input SingleFieldSortingInput {
  field: String! # Name of the field in type
  order: SortOrder! # Sorting order to execute
}


#* Add Types Inputs

"""
Note fields for adding new document to database.
"""
input AddNoteInput {
  """Name of new note."""
  name: String!
}

"""
PhysicalNote fields for adding new document to list of notes in AddTuningInput.
"""
input AddPhysicalNoteInput {
  """ID reference to existing note."""
  noteId: ID

  """New octave number."""
  octave: Int!
}

"""
Instrument fields for adding new document to database.
"""
input AddInstrumentInput {
  """Name of new instrument."""
  name: String!

  """ID reference to existing tuning."""
  defaultTuningId: ID
}

"""
Tuning fields for adding new document to database.
"""
input AddTuningInput {
  """Name of new tuning."""
  name: String!

  """ID reference to existing instrument."""
  instrumentId: ID

  """Array of two-prop objects consisting of octaves and ID references to existing notes."""
  notes: [AddPhysicalNoteInput]
}

"""
Scale fields for adding new document to database.
"""
input AddScaleInput {
  """Name of new scale."""
  name: String!

  """Half-tone steps (in 12 TET) to take between each successive note, sum of this array needs to always result 12 to be valid."""
  steps: [Int!]!
}


#* Update Types Inputs

"""
Optional Note fields for updating existing document in database.
"""
input UpdateNoteInput {
  """New name to overwrite old tuning with."""
  name: String
}

"""
Optional PhysicalNote fields for overwriting existing list of physical notes in UpdateTuningInput.
"""
input UpdatePhysicalNoteInput {
  """ID reference to existing note."""
  noteId: ID
  
  """New octave to overwrite old physical note with."""
  octave: Int
}

"""
Optional Instrument fields for updating existing document in database.
"""
input UpdateInstrumentInput {
  """New name to overwrite old instrument with."""
  name: String
  
  """ID reference to existing tuning."""
  defaultTuningId: ID
}

"""
Optional Tuning fields for updating existing document in database.
"""
input UpdateTuningInput {
  """New name to overwrite old tuning with."""
  name: String

  """ID reference to existing instrument."""
  instrumentId: ID

  """Array of two-prop objects consisting of octaves and ID references to existing notes."""
  notes: [UpdatePhysicalNoteInput]
}

"""
Optional Scale fields for updating existing document in database.
"""
input UpdateScaleInput {
  """New name to overwrite old scale with."""
  name: String

  """Half-tone steps (in 12 TET) to take between each successive note, sum of this array needs to always result 12 to be valid; Overwrites whole list."""
  steps: [Int]
}
