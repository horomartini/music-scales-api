// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "common";

/** Specifies a certain sound being based from 12 TET */
export interface Note {
  /** Valid database-specific ID */
  id: string;
  /** Name of the note, e.g. C#, B, etc. */
  name: string;
}

/** Specifies a note with added octave for better descriptive sound */
export interface PhysicalNote {
  /** Valid database-specific ID reference to specific Note with assigned octave to it */
  noteId: string;
  /** Octave number in range [0, +Inf], e.g. 0, 8, etc. */
  octave: number;
}

/** Specifies an instrument and a way to tune it (and available root sounds) */
export interface Instrument {
  /** Valid database-specific ID */
  id: string;
  /** Name of the instrument, e.g. Guitar, Violin, etc. */
  name: string;
  /** Valid database-specific ID reference to specific Tuning being the default tuning for this instrument */
  defaultTuningId: string;
}

/** Specifies a possible tuning of root notes for specific instrument */
export interface Tuning {
  /** Valid database-specific ID */
  id: string;
  /** Name of the tuning, e.g. E Standard, etc. */
  name: string;
  /** Valid database-specific ID reference to specific Instrument being assignable to / compatible with this tuning */
  instrumentId: string;
  /** Array of notes with octaves for this tuning, assigned from low-tone to high-tone note */
  notes: PhysicalNote[];
}

/** Specifies a set of complementary notes with number of half-tone steps to take between each note */
export interface Scale {
  /** Valid database-specific ID */
  id: string;
  /** Name of the scale, e.g. Aeolian, Double Harmonic, etc. */
  name: string;
  /** Array of half-tone steps (in 12 TET) to take between each successive note, sum of this array needs to always result 12 to be valid */
  steps: number[];
}

function createBaseNote(): Note {
  return { id: "", name: "" };
}

export const Note: MessageFns<Note> = {
  encode(message: Note, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Note {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Note {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Note): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Note>, I>>(base?: I): Note {
    return Note.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Note>, I>>(object: I): Note {
    const message = createBaseNote();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePhysicalNote(): PhysicalNote {
  return { noteId: "", octave: 0 };
}

export const PhysicalNote: MessageFns<PhysicalNote> = {
  encode(message: PhysicalNote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.noteId !== "") {
      writer.uint32(10).string(message.noteId);
    }
    if (message.octave !== 0) {
      writer.uint32(16).int32(message.octave);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhysicalNote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhysicalNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.noteId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.octave = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhysicalNote {
    return {
      noteId: isSet(object.noteId) ? globalThis.String(object.noteId) : "",
      octave: isSet(object.octave) ? globalThis.Number(object.octave) : 0,
    };
  },

  toJSON(message: PhysicalNote): unknown {
    const obj: any = {};
    if (message.noteId !== "") {
      obj.noteId = message.noteId;
    }
    if (message.octave !== 0) {
      obj.octave = Math.round(message.octave);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PhysicalNote>, I>>(base?: I): PhysicalNote {
    return PhysicalNote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PhysicalNote>, I>>(object: I): PhysicalNote {
    const message = createBasePhysicalNote();
    message.noteId = object.noteId ?? "";
    message.octave = object.octave ?? 0;
    return message;
  },
};

function createBaseInstrument(): Instrument {
  return { id: "", name: "", defaultTuningId: "" };
}

export const Instrument: MessageFns<Instrument> = {
  encode(message: Instrument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.defaultTuningId !== "") {
      writer.uint32(26).string(message.defaultTuningId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instrument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstrument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.defaultTuningId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instrument {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      defaultTuningId: isSet(object.defaultTuningId) ? globalThis.String(object.defaultTuningId) : "",
    };
  },

  toJSON(message: Instrument): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.defaultTuningId !== "") {
      obj.defaultTuningId = message.defaultTuningId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Instrument>, I>>(base?: I): Instrument {
    return Instrument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Instrument>, I>>(object: I): Instrument {
    const message = createBaseInstrument();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.defaultTuningId = object.defaultTuningId ?? "";
    return message;
  },
};

function createBaseTuning(): Tuning {
  return { id: "", name: "", instrumentId: "", notes: [] };
}

export const Tuning: MessageFns<Tuning> = {
  encode(message: Tuning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.instrumentId !== "") {
      writer.uint32(26).string(message.instrumentId);
    }
    for (const v of message.notes) {
      PhysicalNote.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tuning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.instrumentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.notes.push(PhysicalNote.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tuning {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      instrumentId: isSet(object.instrumentId) ? globalThis.String(object.instrumentId) : "",
      notes: globalThis.Array.isArray(object?.notes) ? object.notes.map((e: any) => PhysicalNote.fromJSON(e)) : [],
    };
  },

  toJSON(message: Tuning): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.instrumentId !== "") {
      obj.instrumentId = message.instrumentId;
    }
    if (message.notes?.length) {
      obj.notes = message.notes.map((e) => PhysicalNote.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tuning>, I>>(base?: I): Tuning {
    return Tuning.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tuning>, I>>(object: I): Tuning {
    const message = createBaseTuning();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.instrumentId = object.instrumentId ?? "";
    message.notes = object.notes?.map((e) => PhysicalNote.fromPartial(e)) || [];
    return message;
  },
};

function createBaseScale(): Scale {
  return { id: "", name: "", steps: [] };
}

export const Scale: MessageFns<Scale> = {
  encode(message: Scale, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    writer.uint32(26).fork();
    for (const v of message.steps) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Scale {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.steps.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.steps.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Scale {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: Scale): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Scale>, I>>(base?: I): Scale {
    return Scale.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Scale>, I>>(object: I): Scale {
    const message = createBaseScale();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.steps = object.steps?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
