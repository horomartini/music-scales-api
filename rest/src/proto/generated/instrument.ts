// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: instrument.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Instrument } from "./common";

export const protobufPackage = "instruments";

export interface GetInstrumentRequest {
  /** Required; ID of the instrument to retrieve, must be a valid id per database schema; Supports AIP-217 */
  id: string;
}

export interface GetInstrumentResponse {
  /** Retrieved instrument based on ID */
  instrument: Instrument | undefined;
}

export interface GetInstrumentsRequest {
  /** Optional; Filtering; Supports AIP-160 */
  filter: string;
  /** Optional; Ordering; Supports AIP-132 */
  orderBy: string;
  /** Optional; Paginating; Supports AIP-158 */
  pageSize: number;
  /** Optional; Conceptually treated as "Page x", where x is page number in range [1, +INF] */
  pageToken: string;
}

export interface GetInstrumentsResponse {
  /** Ordered and filtered array of items */
  instruments: Instrument[];
  /** Total number of items in database before filter, order and pagination */
  totalCount: number;
  /** Next page cursor token as per AIP-158 */
  nextPageToken: string;
  /** Total number of pages generated from given page_size in request */
  totalPages: number;
}

export interface AddInstrumentRequest {
  /** Required; Name of new note */
  name: string;
  /** Optional; ID reference to existing tuning */
  defaultTuningId: string;
}

export interface AddInstrumentResponse {
  /** Newly created instrument */
  instrument: Instrument | undefined;
}

export interface UpdateInstrumentRequest {
  /** Required; ID of the instrument to update; Supports AIP-217 */
  id: string;
  /** Optional; New name to overwrite old instrument with */
  name: string;
  /** Optional; New ID reference to existing tuning */
  defaultTuningId: string;
}

export interface UpdateInstrumentResponse {
  /** Updated instrument */
  instrument: Instrument | undefined;
}

export interface DeleteInstrumentRequest {
  /** Required; ID of the instrument to delete; Supports AIP-217 */
  id: string;
}

export interface DeleteInstrumentResponse {
  /** ID of the deleted instrument */
  id: string;
}

function createBaseGetInstrumentRequest(): GetInstrumentRequest {
  return { id: "" };
}

export const GetInstrumentRequest: MessageFns<GetInstrumentRequest> = {
  encode(message: GetInstrumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstrumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstrumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstrumentRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetInstrumentRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInstrumentRequest>, I>>(base?: I): GetInstrumentRequest {
    return GetInstrumentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInstrumentRequest>, I>>(object: I): GetInstrumentRequest {
    const message = createBaseGetInstrumentRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetInstrumentResponse(): GetInstrumentResponse {
  return { instrument: undefined };
}

export const GetInstrumentResponse: MessageFns<GetInstrumentResponse> = {
  encode(message: GetInstrumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instrument !== undefined) {
      Instrument.encode(message.instrument, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstrumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstrumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instrument = Instrument.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstrumentResponse {
    return { instrument: isSet(object.instrument) ? Instrument.fromJSON(object.instrument) : undefined };
  },

  toJSON(message: GetInstrumentResponse): unknown {
    const obj: any = {};
    if (message.instrument !== undefined) {
      obj.instrument = Instrument.toJSON(message.instrument);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInstrumentResponse>, I>>(base?: I): GetInstrumentResponse {
    return GetInstrumentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInstrumentResponse>, I>>(object: I): GetInstrumentResponse {
    const message = createBaseGetInstrumentResponse();
    message.instrument = (object.instrument !== undefined && object.instrument !== null)
      ? Instrument.fromPartial(object.instrument)
      : undefined;
    return message;
  },
};

function createBaseGetInstrumentsRequest(): GetInstrumentsRequest {
  return { filter: "", orderBy: "", pageSize: 0, pageToken: "" };
}

export const GetInstrumentsRequest: MessageFns<GetInstrumentsRequest> = {
  encode(message: GetInstrumentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(18).string(message.orderBy);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstrumentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstrumentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstrumentsRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetInstrumentsRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInstrumentsRequest>, I>>(base?: I): GetInstrumentsRequest {
    return GetInstrumentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInstrumentsRequest>, I>>(object: I): GetInstrumentsRequest {
    const message = createBaseGetInstrumentsRequest();
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseGetInstrumentsResponse(): GetInstrumentsResponse {
  return { instruments: [], totalCount: 0, nextPageToken: "", totalPages: 0 };
}

export const GetInstrumentsResponse: MessageFns<GetInstrumentsResponse> = {
  encode(message: GetInstrumentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instruments) {
      Instrument.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstrumentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstrumentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instruments.push(Instrument.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstrumentsResponse {
    return {
      instruments: globalThis.Array.isArray(object?.instruments)
        ? object.instruments.map((e: any) => Instrument.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: GetInstrumentsResponse): unknown {
    const obj: any = {};
    if (message.instruments?.length) {
      obj.instruments = message.instruments.map((e) => Instrument.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInstrumentsResponse>, I>>(base?: I): GetInstrumentsResponse {
    return GetInstrumentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInstrumentsResponse>, I>>(object: I): GetInstrumentsResponse {
    const message = createBaseGetInstrumentsResponse();
    message.instruments = object.instruments?.map((e) => Instrument.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseAddInstrumentRequest(): AddInstrumentRequest {
  return { name: "", defaultTuningId: "" };
}

export const AddInstrumentRequest: MessageFns<AddInstrumentRequest> = {
  encode(message: AddInstrumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.defaultTuningId !== "") {
      writer.uint32(18).string(message.defaultTuningId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInstrumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInstrumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultTuningId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInstrumentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      defaultTuningId: isSet(object.defaultTuningId) ? globalThis.String(object.defaultTuningId) : "",
    };
  },

  toJSON(message: AddInstrumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.defaultTuningId !== "") {
      obj.defaultTuningId = message.defaultTuningId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddInstrumentRequest>, I>>(base?: I): AddInstrumentRequest {
    return AddInstrumentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddInstrumentRequest>, I>>(object: I): AddInstrumentRequest {
    const message = createBaseAddInstrumentRequest();
    message.name = object.name ?? "";
    message.defaultTuningId = object.defaultTuningId ?? "";
    return message;
  },
};

function createBaseAddInstrumentResponse(): AddInstrumentResponse {
  return { instrument: undefined };
}

export const AddInstrumentResponse: MessageFns<AddInstrumentResponse> = {
  encode(message: AddInstrumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instrument !== undefined) {
      Instrument.encode(message.instrument, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInstrumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInstrumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instrument = Instrument.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInstrumentResponse {
    return { instrument: isSet(object.instrument) ? Instrument.fromJSON(object.instrument) : undefined };
  },

  toJSON(message: AddInstrumentResponse): unknown {
    const obj: any = {};
    if (message.instrument !== undefined) {
      obj.instrument = Instrument.toJSON(message.instrument);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddInstrumentResponse>, I>>(base?: I): AddInstrumentResponse {
    return AddInstrumentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddInstrumentResponse>, I>>(object: I): AddInstrumentResponse {
    const message = createBaseAddInstrumentResponse();
    message.instrument = (object.instrument !== undefined && object.instrument !== null)
      ? Instrument.fromPartial(object.instrument)
      : undefined;
    return message;
  },
};

function createBaseUpdateInstrumentRequest(): UpdateInstrumentRequest {
  return { id: "", name: "", defaultTuningId: "" };
}

export const UpdateInstrumentRequest: MessageFns<UpdateInstrumentRequest> = {
  encode(message: UpdateInstrumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.defaultTuningId !== "") {
      writer.uint32(26).string(message.defaultTuningId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstrumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstrumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.defaultTuningId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstrumentRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      defaultTuningId: isSet(object.defaultTuningId) ? globalThis.String(object.defaultTuningId) : "",
    };
  },

  toJSON(message: UpdateInstrumentRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.defaultTuningId !== "") {
      obj.defaultTuningId = message.defaultTuningId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateInstrumentRequest>, I>>(base?: I): UpdateInstrumentRequest {
    return UpdateInstrumentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateInstrumentRequest>, I>>(object: I): UpdateInstrumentRequest {
    const message = createBaseUpdateInstrumentRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.defaultTuningId = object.defaultTuningId ?? "";
    return message;
  },
};

function createBaseUpdateInstrumentResponse(): UpdateInstrumentResponse {
  return { instrument: undefined };
}

export const UpdateInstrumentResponse: MessageFns<UpdateInstrumentResponse> = {
  encode(message: UpdateInstrumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instrument !== undefined) {
      Instrument.encode(message.instrument, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstrumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstrumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instrument = Instrument.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstrumentResponse {
    return { instrument: isSet(object.instrument) ? Instrument.fromJSON(object.instrument) : undefined };
  },

  toJSON(message: UpdateInstrumentResponse): unknown {
    const obj: any = {};
    if (message.instrument !== undefined) {
      obj.instrument = Instrument.toJSON(message.instrument);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateInstrumentResponse>, I>>(base?: I): UpdateInstrumentResponse {
    return UpdateInstrumentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateInstrumentResponse>, I>>(object: I): UpdateInstrumentResponse {
    const message = createBaseUpdateInstrumentResponse();
    message.instrument = (object.instrument !== undefined && object.instrument !== null)
      ? Instrument.fromPartial(object.instrument)
      : undefined;
    return message;
  },
};

function createBaseDeleteInstrumentRequest(): DeleteInstrumentRequest {
  return { id: "" };
}

export const DeleteInstrumentRequest: MessageFns<DeleteInstrumentRequest> = {
  encode(message: DeleteInstrumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstrumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstrumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstrumentRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteInstrumentRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteInstrumentRequest>, I>>(base?: I): DeleteInstrumentRequest {
    return DeleteInstrumentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteInstrumentRequest>, I>>(object: I): DeleteInstrumentRequest {
    const message = createBaseDeleteInstrumentRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteInstrumentResponse(): DeleteInstrumentResponse {
  return { id: "" };
}

export const DeleteInstrumentResponse: MessageFns<DeleteInstrumentResponse> = {
  encode(message: DeleteInstrumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstrumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstrumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstrumentResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteInstrumentResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteInstrumentResponse>, I>>(base?: I): DeleteInstrumentResponse {
    return DeleteInstrumentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteInstrumentResponse>, I>>(object: I): DeleteInstrumentResponse {
    const message = createBaseDeleteInstrumentResponse();
    message.id = object.id ?? "";
    return message;
  },
};

export type InstrumentServiceService = typeof InstrumentServiceService;
export const InstrumentServiceService = {
  getInstrument: {
    path: "/instruments.InstrumentService/GetInstrument",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInstrumentRequest) => Buffer.from(GetInstrumentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetInstrumentRequest.decode(value),
    responseSerialize: (value: GetInstrumentResponse) => Buffer.from(GetInstrumentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetInstrumentResponse.decode(value),
  },
  getInstruments: {
    path: "/instruments.InstrumentService/GetInstruments",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInstrumentsRequest) => Buffer.from(GetInstrumentsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetInstrumentsRequest.decode(value),
    responseSerialize: (value: GetInstrumentsResponse) => Buffer.from(GetInstrumentsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetInstrumentsResponse.decode(value),
  },
  addInstrument: {
    path: "/instruments.InstrumentService/AddInstrument",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddInstrumentRequest) => Buffer.from(AddInstrumentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddInstrumentRequest.decode(value),
    responseSerialize: (value: AddInstrumentResponse) => Buffer.from(AddInstrumentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddInstrumentResponse.decode(value),
  },
  updateInstrument: {
    path: "/instruments.InstrumentService/UpdateInstrument",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateInstrumentRequest) => Buffer.from(UpdateInstrumentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateInstrumentRequest.decode(value),
    responseSerialize: (value: UpdateInstrumentResponse) =>
      Buffer.from(UpdateInstrumentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateInstrumentResponse.decode(value),
  },
  deleteInstrument: {
    path: "/instruments.InstrumentService/DeleteInstrument",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteInstrumentRequest) => Buffer.from(DeleteInstrumentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteInstrumentRequest.decode(value),
    responseSerialize: (value: DeleteInstrumentResponse) =>
      Buffer.from(DeleteInstrumentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteInstrumentResponse.decode(value),
  },
} as const;

export interface InstrumentServiceServer extends UntypedServiceImplementation {
  getInstrument: handleUnaryCall<GetInstrumentRequest, GetInstrumentResponse>;
  getInstruments: handleUnaryCall<GetInstrumentsRequest, GetInstrumentsResponse>;
  addInstrument: handleUnaryCall<AddInstrumentRequest, AddInstrumentResponse>;
  updateInstrument: handleUnaryCall<UpdateInstrumentRequest, UpdateInstrumentResponse>;
  deleteInstrument: handleUnaryCall<DeleteInstrumentRequest, DeleteInstrumentResponse>;
}

export interface InstrumentServiceClient extends Client {
  getInstrument(
    request: GetInstrumentRequest,
    callback: (error: ServiceError | null, response: GetInstrumentResponse) => void,
  ): ClientUnaryCall;
  getInstrument(
    request: GetInstrumentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetInstrumentResponse) => void,
  ): ClientUnaryCall;
  getInstrument(
    request: GetInstrumentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetInstrumentResponse) => void,
  ): ClientUnaryCall;
  getInstruments(
    request: GetInstrumentsRequest,
    callback: (error: ServiceError | null, response: GetInstrumentsResponse) => void,
  ): ClientUnaryCall;
  getInstruments(
    request: GetInstrumentsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetInstrumentsResponse) => void,
  ): ClientUnaryCall;
  getInstruments(
    request: GetInstrumentsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetInstrumentsResponse) => void,
  ): ClientUnaryCall;
  addInstrument(
    request: AddInstrumentRequest,
    callback: (error: ServiceError | null, response: AddInstrumentResponse) => void,
  ): ClientUnaryCall;
  addInstrument(
    request: AddInstrumentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddInstrumentResponse) => void,
  ): ClientUnaryCall;
  addInstrument(
    request: AddInstrumentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddInstrumentResponse) => void,
  ): ClientUnaryCall;
  updateInstrument(
    request: UpdateInstrumentRequest,
    callback: (error: ServiceError | null, response: UpdateInstrumentResponse) => void,
  ): ClientUnaryCall;
  updateInstrument(
    request: UpdateInstrumentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateInstrumentResponse) => void,
  ): ClientUnaryCall;
  updateInstrument(
    request: UpdateInstrumentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateInstrumentResponse) => void,
  ): ClientUnaryCall;
  deleteInstrument(
    request: DeleteInstrumentRequest,
    callback: (error: ServiceError | null, response: DeleteInstrumentResponse) => void,
  ): ClientUnaryCall;
  deleteInstrument(
    request: DeleteInstrumentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteInstrumentResponse) => void,
  ): ClientUnaryCall;
  deleteInstrument(
    request: DeleteInstrumentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteInstrumentResponse) => void,
  ): ClientUnaryCall;
}

export const InstrumentServiceClient = makeGenericClientConstructor(
  InstrumentServiceService,
  "instruments.InstrumentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InstrumentServiceClient;
  service: typeof InstrumentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
