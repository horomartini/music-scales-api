// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: scale.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Scale } from "./common";

export const protobufPackage = "scales";

export interface GetScaleRequest {
  /** Required; ID of the scale to retrieve, must be a valid id per database schema; Supports AIP-217 */
  id: string;
}

export interface GetScaleResponse {
  /** Retrieved scale based on ID */
  scale: Scale | undefined;
}

export interface GetScalesRequest {
  /** Optional; Filtering; Supports AIP-160 */
  filter: string;
  /** Optional; Ordering; Supports AIP-132 */
  orderBy: string;
  /** Optional; Paginating; Supports AIP-158 */
  pageSize: number;
  /** Optional; Conceptually treated as "Page x", where x is page number in range [1, +INF] */
  pageToken: string;
}

export interface GetScalesResponse {
  /** Ordered and filtered array of items */
  scales: Scale[];
  /** Total number of items in database before filter, order and pagination */
  totalCount: number;
  /** Next page cursor token as per AIP-158 */
  nextPageToken: string;
  /** Total number of pages generated from given page_size in request */
  totalPages: number;
}

export interface AddScaleRequest {
  /** Required; Name of new scale */
  name: string;
  /** Required; half-tone steps between notes of scale */
  steps: number[];
}

export interface AddScaleResponse {
  /** Newly created scale */
  scale: Scale | undefined;
}

export interface UpdateScaleRequest {
  /** Required; ID of the scale to update; Supports AIP-217 */
  id: string;
  /** Optional; New name to overwrite old scale with */
  name: string;
  /** Optional; New steps to overwrite old scale with */
  steps: number[];
}

export interface UpdateScaleResponse {
  /** Updated scale */
  scale: Scale | undefined;
}

export interface DeleteScaleRequest {
  /** Required; ID of the scale to delete; Supports AIP-217 */
  id: string;
}

export interface DeleteScaleResponse {
  /** ID of the deleted scale */
  id: string;
}

function createBaseGetScaleRequest(): GetScaleRequest {
  return { id: "" };
}

export const GetScaleRequest: MessageFns<GetScaleRequest> = {
  encode(message: GetScaleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScaleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScaleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScaleRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetScaleRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetScaleRequest>, I>>(base?: I): GetScaleRequest {
    return GetScaleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetScaleRequest>, I>>(object: I): GetScaleRequest {
    const message = createBaseGetScaleRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetScaleResponse(): GetScaleResponse {
  return { scale: undefined };
}

export const GetScaleResponse: MessageFns<GetScaleResponse> = {
  encode(message: GetScaleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scale !== undefined) {
      Scale.encode(message.scale, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScaleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScaleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scale = Scale.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScaleResponse {
    return { scale: isSet(object.scale) ? Scale.fromJSON(object.scale) : undefined };
  },

  toJSON(message: GetScaleResponse): unknown {
    const obj: any = {};
    if (message.scale !== undefined) {
      obj.scale = Scale.toJSON(message.scale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetScaleResponse>, I>>(base?: I): GetScaleResponse {
    return GetScaleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetScaleResponse>, I>>(object: I): GetScaleResponse {
    const message = createBaseGetScaleResponse();
    message.scale = (object.scale !== undefined && object.scale !== null) ? Scale.fromPartial(object.scale) : undefined;
    return message;
  },
};

function createBaseGetScalesRequest(): GetScalesRequest {
  return { filter: "", orderBy: "", pageSize: 0, pageToken: "" };
}

export const GetScalesRequest: MessageFns<GetScalesRequest> = {
  encode(message: GetScalesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(18).string(message.orderBy);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScalesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScalesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScalesRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetScalesRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetScalesRequest>, I>>(base?: I): GetScalesRequest {
    return GetScalesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetScalesRequest>, I>>(object: I): GetScalesRequest {
    const message = createBaseGetScalesRequest();
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseGetScalesResponse(): GetScalesResponse {
  return { scales: [], totalCount: 0, nextPageToken: "", totalPages: 0 };
}

export const GetScalesResponse: MessageFns<GetScalesResponse> = {
  encode(message: GetScalesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scales) {
      Scale.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScalesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScalesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scales.push(Scale.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScalesResponse {
    return {
      scales: globalThis.Array.isArray(object?.scales) ? object.scales.map((e: any) => Scale.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: GetScalesResponse): unknown {
    const obj: any = {};
    if (message.scales?.length) {
      obj.scales = message.scales.map((e) => Scale.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetScalesResponse>, I>>(base?: I): GetScalesResponse {
    return GetScalesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetScalesResponse>, I>>(object: I): GetScalesResponse {
    const message = createBaseGetScalesResponse();
    message.scales = object.scales?.map((e) => Scale.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseAddScaleRequest(): AddScaleRequest {
  return { name: "", steps: [] };
}

export const AddScaleRequest: MessageFns<AddScaleRequest> = {
  encode(message: AddScaleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.steps) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddScaleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddScaleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.steps.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.steps.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddScaleRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: AddScaleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddScaleRequest>, I>>(base?: I): AddScaleRequest {
    return AddScaleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddScaleRequest>, I>>(object: I): AddScaleRequest {
    const message = createBaseAddScaleRequest();
    message.name = object.name ?? "";
    message.steps = object.steps?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddScaleResponse(): AddScaleResponse {
  return { scale: undefined };
}

export const AddScaleResponse: MessageFns<AddScaleResponse> = {
  encode(message: AddScaleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scale !== undefined) {
      Scale.encode(message.scale, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddScaleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddScaleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scale = Scale.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddScaleResponse {
    return { scale: isSet(object.scale) ? Scale.fromJSON(object.scale) : undefined };
  },

  toJSON(message: AddScaleResponse): unknown {
    const obj: any = {};
    if (message.scale !== undefined) {
      obj.scale = Scale.toJSON(message.scale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddScaleResponse>, I>>(base?: I): AddScaleResponse {
    return AddScaleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddScaleResponse>, I>>(object: I): AddScaleResponse {
    const message = createBaseAddScaleResponse();
    message.scale = (object.scale !== undefined && object.scale !== null) ? Scale.fromPartial(object.scale) : undefined;
    return message;
  },
};

function createBaseUpdateScaleRequest(): UpdateScaleRequest {
  return { id: "", name: "", steps: [] };
}

export const UpdateScaleRequest: MessageFns<UpdateScaleRequest> = {
  encode(message: UpdateScaleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    writer.uint32(26).fork();
    for (const v of message.steps) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateScaleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateScaleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.steps.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.steps.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateScaleRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: UpdateScaleRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateScaleRequest>, I>>(base?: I): UpdateScaleRequest {
    return UpdateScaleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateScaleRequest>, I>>(object: I): UpdateScaleRequest {
    const message = createBaseUpdateScaleRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.steps = object.steps?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateScaleResponse(): UpdateScaleResponse {
  return { scale: undefined };
}

export const UpdateScaleResponse: MessageFns<UpdateScaleResponse> = {
  encode(message: UpdateScaleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scale !== undefined) {
      Scale.encode(message.scale, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateScaleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateScaleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scale = Scale.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateScaleResponse {
    return { scale: isSet(object.scale) ? Scale.fromJSON(object.scale) : undefined };
  },

  toJSON(message: UpdateScaleResponse): unknown {
    const obj: any = {};
    if (message.scale !== undefined) {
      obj.scale = Scale.toJSON(message.scale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateScaleResponse>, I>>(base?: I): UpdateScaleResponse {
    return UpdateScaleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateScaleResponse>, I>>(object: I): UpdateScaleResponse {
    const message = createBaseUpdateScaleResponse();
    message.scale = (object.scale !== undefined && object.scale !== null) ? Scale.fromPartial(object.scale) : undefined;
    return message;
  },
};

function createBaseDeleteScaleRequest(): DeleteScaleRequest {
  return { id: "" };
}

export const DeleteScaleRequest: MessageFns<DeleteScaleRequest> = {
  encode(message: DeleteScaleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteScaleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteScaleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteScaleRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteScaleRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteScaleRequest>, I>>(base?: I): DeleteScaleRequest {
    return DeleteScaleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteScaleRequest>, I>>(object: I): DeleteScaleRequest {
    const message = createBaseDeleteScaleRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteScaleResponse(): DeleteScaleResponse {
  return { id: "" };
}

export const DeleteScaleResponse: MessageFns<DeleteScaleResponse> = {
  encode(message: DeleteScaleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteScaleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteScaleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteScaleResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteScaleResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteScaleResponse>, I>>(base?: I): DeleteScaleResponse {
    return DeleteScaleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteScaleResponse>, I>>(object: I): DeleteScaleResponse {
    const message = createBaseDeleteScaleResponse();
    message.id = object.id ?? "";
    return message;
  },
};

export type ScaleServiceService = typeof ScaleServiceService;
export const ScaleServiceService = {
  getScale: {
    path: "/scales.ScaleService/GetScale",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetScaleRequest) => Buffer.from(GetScaleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetScaleRequest.decode(value),
    responseSerialize: (value: GetScaleResponse) => Buffer.from(GetScaleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetScaleResponse.decode(value),
  },
  getScales: {
    path: "/scales.ScaleService/GetScales",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetScalesRequest) => Buffer.from(GetScalesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetScalesRequest.decode(value),
    responseSerialize: (value: GetScalesResponse) => Buffer.from(GetScalesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetScalesResponse.decode(value),
  },
  addScale: {
    path: "/scales.ScaleService/AddScale",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddScaleRequest) => Buffer.from(AddScaleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddScaleRequest.decode(value),
    responseSerialize: (value: AddScaleResponse) => Buffer.from(AddScaleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddScaleResponse.decode(value),
  },
  updateScale: {
    path: "/scales.ScaleService/UpdateScale",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateScaleRequest) => Buffer.from(UpdateScaleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateScaleRequest.decode(value),
    responseSerialize: (value: UpdateScaleResponse) => Buffer.from(UpdateScaleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateScaleResponse.decode(value),
  },
  deleteScale: {
    path: "/scales.ScaleService/DeleteScale",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteScaleRequest) => Buffer.from(DeleteScaleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteScaleRequest.decode(value),
    responseSerialize: (value: DeleteScaleResponse) => Buffer.from(DeleteScaleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteScaleResponse.decode(value),
  },
} as const;

export interface ScaleServiceServer extends UntypedServiceImplementation {
  getScale: handleUnaryCall<GetScaleRequest, GetScaleResponse>;
  getScales: handleUnaryCall<GetScalesRequest, GetScalesResponse>;
  addScale: handleUnaryCall<AddScaleRequest, AddScaleResponse>;
  updateScale: handleUnaryCall<UpdateScaleRequest, UpdateScaleResponse>;
  deleteScale: handleUnaryCall<DeleteScaleRequest, DeleteScaleResponse>;
}

export interface ScaleServiceClient extends Client {
  getScale(
    request: GetScaleRequest,
    callback: (error: ServiceError | null, response: GetScaleResponse) => void,
  ): ClientUnaryCall;
  getScale(
    request: GetScaleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetScaleResponse) => void,
  ): ClientUnaryCall;
  getScale(
    request: GetScaleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetScaleResponse) => void,
  ): ClientUnaryCall;
  getScales(
    request: GetScalesRequest,
    callback: (error: ServiceError | null, response: GetScalesResponse) => void,
  ): ClientUnaryCall;
  getScales(
    request: GetScalesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetScalesResponse) => void,
  ): ClientUnaryCall;
  getScales(
    request: GetScalesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetScalesResponse) => void,
  ): ClientUnaryCall;
  addScale(
    request: AddScaleRequest,
    callback: (error: ServiceError | null, response: AddScaleResponse) => void,
  ): ClientUnaryCall;
  addScale(
    request: AddScaleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddScaleResponse) => void,
  ): ClientUnaryCall;
  addScale(
    request: AddScaleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddScaleResponse) => void,
  ): ClientUnaryCall;
  updateScale(
    request: UpdateScaleRequest,
    callback: (error: ServiceError | null, response: UpdateScaleResponse) => void,
  ): ClientUnaryCall;
  updateScale(
    request: UpdateScaleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateScaleResponse) => void,
  ): ClientUnaryCall;
  updateScale(
    request: UpdateScaleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateScaleResponse) => void,
  ): ClientUnaryCall;
  deleteScale(
    request: DeleteScaleRequest,
    callback: (error: ServiceError | null, response: DeleteScaleResponse) => void,
  ): ClientUnaryCall;
  deleteScale(
    request: DeleteScaleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteScaleResponse) => void,
  ): ClientUnaryCall;
  deleteScale(
    request: DeleteScaleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteScaleResponse) => void,
  ): ClientUnaryCall;
}

export const ScaleServiceClient = makeGenericClientConstructor(
  ScaleServiceService,
  "scales.ScaleService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ScaleServiceClient;
  service: typeof ScaleServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
